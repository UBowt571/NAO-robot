<!DOCTYPE html>
<html>
<head>
	<title>New Sails App</title>
	
	<!-- Viewport mobile tag for sensible mobile support -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	
	<%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
	<%/* <meta name="robots" content="noindex"> */%>
	
	
	<!--
		Stylesheets and Preprocessors
		==============================
		
		You can always bring in CSS files manually with `<link>` tags, or asynchronously
		using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
		of Sails' conventional asset pipeline (boilerplate Gruntfile).
		
		By default, stylesheets from your `assets/styles` folder are included
		here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
		are supported. In production, your styles will be minified and concatenated into
		a single file.
		
		To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:
		
		+ Change the order of your CSS files
		+ Import stylesheets from other directories
		+ Use a different or additional preprocessor, like SASS, SCSS or Stylus
	-->
	
	<!--STYLES-->
	<link rel="stylesheet" href="/styles/bootstrap.min.css">
	<link rel="stylesheet" href="/styles/custom.css">
	<link rel="stylesheet" href="/styles/importer.css">
	<link rel="stylesheet" href="/styles/Lato.css">
	<link rel="stylesheet" href="/styles/semantic.min.css">
	<!--STYLES END-->
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay" crossorigin="anonymous">
</head>

<body>
	<!-- Image and text -->
	<div class="ui borderless inverted top fixed menu">
		<div class="item">
			<img src="./images/header.png" title="Knock Knock !" class="header_logo">
		</div>
		<div class="item">
			<h1 class="header_title">NAOBOX V2</h1>
		</div>
		<div class="item">
			<div id="batteryPourcent"></div>
			<i class="icons" style="font-size: 2.5em;">
				<i aria-hidden="true" id="batteryIcon" class="battery empty icon"></i>
				<i aria-hidden="true" id="connectionStatus" class="red dont icon"></i>
			</i>
		</div>
		<div class="item">
			<button class="ui right labeled icon button disabled" tabindex="-1">
				<i aria-hidden="true" class="window close icon"></i>Arrêter l'action
			</button>
		</div>
		<div class="right menu">
			<div class="item">
				<a title="Zone administrateur" class="ui icon inverted button" href="#/admin">
					<i aria-hidden="true" class="wrench icon"></i>
				</a>
			</div>
			<a href="../assets/Manuel_utilisation.pdf" class="doc" target="_blank" title="Manuel d'utilisation">
				<div class="item">
					<button class="ui icon inverted button">
						<i aria-hidden="true" class="book icon"></i>
					</button>
				</div>
			</a>
			<div class="item">
				<button title="Cliquez pour éteindre le robot" class="ui red icon inverted button">
					<i aria-hidden="true" class="power icon"></i>
				</button>
			</div>
		</div>
	</div>
	<%- body %>
	
	
	
	<!--
		Client-side Templates
		========================
		
		HTML templates are important prerequisites of modern, rich client applications.
		To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
		require that you load these templates client-side.
		
		By default, your Gruntfile is configured to automatically load and precompile
		client-side JST templates in your `assets/templates` folder, then
		include them here automatically (between TEMPLATES and TEMPLATES END).
		
		To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:
		
		+ Import templates from other directories
		+ Use a different view engine (handlebars, dust, pug/jade, etc.)
		+ Internationalize your client-side templates using a server-side
		stringfile before they're served.
	-->
	
	<!--TEMPLATES-->
	
	<!--TEMPLATES END-->
	
	
	<!--
		Server-side View Locals
		========================
		
		Sometimes, it's convenient to get access to your server-side view locals from
		client-side JavaScript.  This can improve page load times, remove the need for
		extra AJAX requests, and make your client-side code easier to understand and
		to maintain.  Sails provides a simple mechanism for accessing dynamic view
		locals: the "exposeLocalsToBrowser()" view partial.
		
		For more information on using this built-in feature, see:
		https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser
		
	-->
	
	
	<!--
		
		Client-side Javascript
		========================
		
		You can always bring in JS files manually with `script` tags, or asynchronously
		on the client using a solution like AMD (RequireJS).  Or, if you like, you can
		take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).
		
		By default, files in your `assets/js` folder are included here
		automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
		CoffeeScript (.coffee) are supported. In production, your scripts will be minified
		and concatenated into a single file.
		
		To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:
		
		+ Change the order of your scripts
		+ Import scripts from other directories
		+ Use a different preprocessor, like TypeScript
		
	-->
	
	<!--SCRIPTS-->
	<script src="/dependencies/sails.io.js"></script>
	<script src="/js/bootstrap.min.js"></script>
	<script src="/js/jquery-3.4.1.min.js"></script>
	<script src="/js/semantic.min.js"></script>
	<!--SCRIPTS END-->

	<script>
		var connected = false;
		var battery_value = 60;
		if(connected){
			if()
			/*https://fontawesome.com/icons*/
		}else{
			$("#batteryPourcent").text("0%");
		}
	</script>
</body>
</html>
