<!DOCTYPE html>
<html>
<head>
	<title>NAOBOX 3IL 2019</title>
	
	<!-- Viewport mobile tag for sensible mobile support -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	
	<%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
	<%/* <meta name="robots" content="noindex"> */%>
	
	
	<!--
		Stylesheets and Preprocessors
		==============================
		
		You can always bring in CSS files manually with `<link>` tags, or asynchronously
		using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
		of Sails' conventional asset pipeline (boilerplate Gruntfile).
		
		By default, stylesheets from your `assets/styles` folder are included
		here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
		are supported. In production, your styles will be minified and concatenated into
		a single file.
		
		To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:
		
		+ Change the order of your CSS files
		+ Import stylesheets from other directories
		+ Use a different or additional preprocessor, like SASS, SCSS or Stylus
	-->
	
	<!--STYLES-->
	<link rel="stylesheet" href="/styles/bootstrap.min.css">
	<link rel="stylesheet" href="/styles/custom.css">
	<link rel="stylesheet" href="/styles/importer.css">
	<link rel="stylesheet" href="/styles/Lato.css">
	<link rel="stylesheet" href="/styles/notifications.css">
	<link rel="stylesheet" href="/styles/semantic.min.css">
	<!--STYLES END-->
</head>

<body>
	<!-- Image and text -->
	<nav class="navbar navbar-expand-lg sticky-top navbar-dark bg-dark">
		<a class="navbar-brand" href=<%home_link%> >
			<img src="./images/header.png" title="Knock Knock !" class="header_logo" >
		</a>
		<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse bg-dark" id="navbarTogglerDemo01">
			<ul class="navbar-nav mr-auto mt-2 mt-lg-0">
				<li class="nav-item">
					<a href=<%=home_link%> >
						<span class="navbar-brand mb-0 h1 header_title">NAOBOX 3IL</span>
					</a>
				</li>
				<li class="nav-item">
						<div>
							<span class="fa-stack">
								<i aria-hidden="true" id="batteryIcon" class="fas fa-battery-empty fa-stack-2x"></i>
								<i aria-hidden="true" id="connectionStatus" style="color: #ff0000;" class="fas fa-ban fa-stack-2x"></i>
							</span>
						</div>
				</li>
				<li class="nav-item">
					<div class="btn-group centered-navBtn">
						<button id="stop-btn" class="btn btn-secondary"><div>Arrêt comportement</div>  <i aria-hidden="true" style="position: absolute;right: 8%;top: 25%;" class="fas fa-times"></i></button>
					</div>
				</li>
				<li class="nav-item">
					<div class="right-aligned-content">
						<a href=<%=login_page==undefined ? login_page : "#"%> >
							<button class="btn btn-outline-secondary my-2 my-sm-0"><i class="fas fa-tools"></i></button>
						</a>
						<a href="https://github.com/projet-nao/Nao2019/tree/NAO-1-Test">
							<button class="btn btn-outline-secondary my-2 my-sm-0 right-content"><i class="fas fa-book"></i></button>
						</a>
						<button class="btn btn-outline-danger my-2 my-sm-0 right-content"><i class="fas fa-power-off"></i></button>
					</div>
				</li>
			</ul>
		</div>
	</nav>
<!-- 	<div class="ui borderless inverted top fixed menu">
		<div class="item">
			<img src="./images/header.png" title="Knock Knock !" class="header_logo">
		</div>
		<div class="item">
			<h1 class="header_title">NAOBOX V2</h1>
		</div>
		<div class="item">
			<div id="batteryPourcent"></div>
			<span class="fa-stack">
				<i aria-hidden="true" id="batteryIcon" class="fas fa-battery-empty fa-stack-2x"></i>
				<i aria-hidden="true" id="connectionStatus" style="color: #ff0000;" class="fas fa-ban fa-stack-2x"></i>
			</span>
		</div>
		<div class="item">
			<button class="ui right labeled icon button disabled" tabindex="-1">
				<i aria-hidden="true" class="window close icon"><i class="fas fa-times" style="margin-top: 10px;"></i></i>Arrêter l'action
			</button>
		</div>
		<div class="right menu">
			<div class="item">
				<a title="Zone administrateur" class="ui icon inverted button" href="#/admin">
					<i aria-hidden="true" class="wrench icon"></i>
				</a>
			</div>
			<a href="../assets/Manuel_utilisation.pdf" class="doc" target="_blank" title="Manuel d'utilisation">
				<div class="item">
					<button class="ui icon inverted button">
						<i aria-hidden="true" class="book icon"></i>
					</button>
				</div>
			</a>
			<div class="item">
				<button title="Cliquez pour éteindre le robot" class="ui red icon inverted button">
					<i aria-hidden="true" class="power icon"></i>
				</button>
			</div>
		</div>
	</div> -->
	<%- body %>
    <input type="text" id="ip-nao" />
    <input type="button" id="btn-connect" value="Connexion"/>
    <input type="button" id="btn-camera" value="Activer caméras"/><br/>
    <canvas id="cameraT"></canvas><br />
	<canvas id="cameraB"></canvas>
	<footer>
		<div style="text-align: center; margin: 50px;">3iL © 2019</div>
	</footer>
	
	
	
	<!--
		Client-side Templates
		========================
		
		HTML templates are important prerequisites of modern, rich client applications.
		To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
		require that you load these templates client-side.
		
		By default, your Gruntfile is configured to automatically load and precompile
		client-side JST templates in your `assets/templates` folder, then
		include them here automatically (between TEMPLATES and TEMPLATES END).
		
		To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:
		
		+ Import templates from other directories
		+ Use a different view engine (handlebars, dust, pug/jade, etc.)
		+ Internationalize your client-side templates using a server-side
		stringfile before they're served.
	-->
	
	<!--TEMPLATES-->
	
	<!--TEMPLATES END-->
	
	
	<!--
		Server-side View Locals
		========================
		
		Sometimes, it's convenient to get access to your server-side view locals from
		client-side JavaScript.  This can improve page load times, remove the need for
		extra AJAX requests, and make your client-side code easier to understand and
		to maintain.  Sails provides a simple mechanism for accessing dynamic view
		locals: the "exposeLocalsToBrowser()" view partial.
		
		For more information on using this built-in feature, see:
		https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser
		
	-->
	
	
	<!--
		
		Client-side Javascript
		========================
		
		You can always bring in JS files manually with `script` tags, or asynchronously
		on the client using a solution like AMD (RequireJS).  Or, if you like, you can
		take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).
		
		By default, files in your `assets/js` folder are included here
		automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
		CoffeeScript (.coffee) are supported. In production, your scripts will be minified
		and concatenated into a single file.
		
		To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
		For example, here are a few things you could do:
		
		+ Change the order of your scripts
		+ Import scripts from other directories
		+ Use a different preprocessor, like TypeScript
		
	-->
	
	<!--SCRIPTS-->
	<script src="/dependencies/sails.io.js"></script>
	<script src="/dependencies/jquery-3.4.1.min.js"></script>
	<script src="/js/battery_displayer.js"></script>
	<script src="/js/bootstrap.min.js"></script>
	<script src="/js/fontawesome.js"></script>
	<script src="/js/semantic.min.js"></script>
	<script src="/js/jsnao.js"></script>
	<!--SCRIPTS END-->
    <script>
        function closeNotification(numNotif){
            var idNotif= "#notification"+numNotif;
            var notifications = $(idNotif);
            if(notifications.length == 1){
                notifications.remove();
            }else{
                console.log("err in notifications selection");
            }
        }

        var numNotif=1;
        function newNotification(message){
            var notifications = $(".notifications");
            numNotif++;
            var notification ="<div id=\"notification"+numNotif+"\"class=\"nao message\">\
                <i class=\"fas fa-exclamation-circle fa-2x\" style=\"margin-right: 10px;\"></i>\
                <div>"+message+"</div>\
                <i class=\"fas fa-times close-notification\" style=\"left:0px\" onclick=\"closeNotification("+numNotif+")\"></i></div>";
            notifications.prepend(notification);
        }
    </script>
	<script type="text/javascript">
    $("#btn-connect").click(function() {
        var ipNao = $("#ip-nao").val();
		var jsQim = "http://"+ipNao+"/libs/qimessaging/1.0/qimessaging.js";
		try {
			$.ajax({
				url: jsQim,
				dataType: "script"
			}).done(function() {
				jsnao.connect(ipNao);
                newNotification("Nao connecté !");
			}).fail(function() {
				alert("La librairie QImessaging de NAO ne peut pas être executée!");
			});
		} catch(err) {
			alert("Une erreur s'est produite: \n"+ err);
		}
    });
    $("#btn-camera").click(function() {
        jsnao.display_video();
    });
	</script>
	<!--JQuery MUST be before bootstrap for the navbar to work !! -->
</body>
</html>
